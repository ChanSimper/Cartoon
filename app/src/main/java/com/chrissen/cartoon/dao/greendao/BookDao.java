package com.chrissen.cartoon.dao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookName = new Property(1, String.class, "bookName", false, "BOOK_NAME");
        public final static Property ChapterId = new Property(2, String.class, "chapterId", false, "CHAPTER_ID");
        public final static Property ChapterName = new Property(3, String.class, "chapterName", false, "CHAPTER_NAME");
        public final static Property ImageId = new Property(4, int.class, "imageId", false, "IMAGE_ID");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Area = new Property(6, String.class, "area", false, "AREA");
        public final static Property Finish = new Property(7, boolean.class, "finish", false, "FINISH");
        public final static Property LastUpdate = new Property(8, String.class, "lastUpdate", false, "LAST_UPDATE");
        public final static Property AddedTime = new Property(9, long.class, "addedTime", false, "ADDED_TIME");
    }


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BOOK_NAME\" TEXT," + // 1: bookName
                "\"CHAPTER_ID\" TEXT," + // 2: chapterId
                "\"CHAPTER_NAME\" TEXT," + // 3: chapterName
                "\"IMAGE_ID\" INTEGER NOT NULL ," + // 4: imageId
                "\"TYPE\" TEXT," + // 5: type
                "\"AREA\" TEXT," + // 6: area
                "\"FINISH\" INTEGER NOT NULL ," + // 7: finish
                "\"LAST_UPDATE\" TEXT," + // 8: lastUpdate
                "\"ADDED_TIME\" INTEGER NOT NULL );"); // 9: addedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(3, chapterId);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(4, chapterName);
        }
        stmt.bindLong(5, entity.getImageId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(7, area);
        }
        stmt.bindLong(8, entity.getFinish() ? 1L: 0L);
 
        String lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindString(9, lastUpdate);
        }
        stmt.bindLong(10, entity.getAddedTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(3, chapterId);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(4, chapterName);
        }
        stmt.bindLong(5, entity.getImageId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(7, area);
        }
        stmt.bindLong(8, entity.getFinish() ? 1L: 0L);
 
        String lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindString(9, lastUpdate);
        }
        stmt.bindLong(10, entity.getAddedTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chapterId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chapterName
            cursor.getInt(offset + 4), // imageId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // area
            cursor.getShort(offset + 7) != 0, // finish
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lastUpdate
            cursor.getLong(offset + 9) // addedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChapterId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChapterName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageId(cursor.getInt(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setArea(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFinish(cursor.getShort(offset + 7) != 0);
        entity.setLastUpdate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddedTime(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Book entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
