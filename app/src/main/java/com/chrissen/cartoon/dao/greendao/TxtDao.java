package com.chrissen.cartoon.dao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TXT".
*/
public class TxtDao extends AbstractDao<Txt, Long> {

    public static final String TABLENAME = "TXT";

    /**
     * Properties of entity Txt.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ChapterName = new Property(2, String.class, "chapterName", false, "CHAPTER_NAME");
        public final static Property FilePath = new Property(3, String.class, "filePath", false, "FILE_PATH");
        public final static Property Progress = new Property(4, float.class, "progress", false, "PROGRESS");
        public final static Property AddedTime = new Property(5, long.class, "addedTime", false, "ADDED_TIME");
        public final static Property UpdatedTime = new Property(6, long.class, "updatedTime", false, "UPDATED_TIME");
        public final static Property CharIndex = new Property(7, int.class, "charIndex", false, "CHAR_INDEX");
        public final static Property CurrentCharIndex = new Property(8, int.class, "currentCharIndex", false, "CURRENT_CHAR_INDEX");
        public final static Property CurrentParagraphIndex = new Property(9, int.class, "currentParagraphIndex", false, "CURRENT_PARAGRAPH_INDEX");
    }


    public TxtDao(DaoConfig config) {
        super(config);
    }
    
    public TxtDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TXT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CHAPTER_NAME\" TEXT," + // 2: chapterName
                "\"FILE_PATH\" TEXT," + // 3: filePath
                "\"PROGRESS\" REAL NOT NULL ," + // 4: progress
                "\"ADDED_TIME\" INTEGER NOT NULL ," + // 5: addedTime
                "\"UPDATED_TIME\" INTEGER NOT NULL ," + // 6: updatedTime
                "\"CHAR_INDEX\" INTEGER NOT NULL ," + // 7: charIndex
                "\"CURRENT_CHAR_INDEX\" INTEGER NOT NULL ," + // 8: currentCharIndex
                "\"CURRENT_PARAGRAPH_INDEX\" INTEGER NOT NULL );"); // 9: currentParagraphIndex
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TXT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Txt entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(3, chapterName);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(4, filePath);
        }
        stmt.bindDouble(5, entity.getProgress());
        stmt.bindLong(6, entity.getAddedTime());
        stmt.bindLong(7, entity.getUpdatedTime());
        stmt.bindLong(8, entity.getCharIndex());
        stmt.bindLong(9, entity.getCurrentCharIndex());
        stmt.bindLong(10, entity.getCurrentParagraphIndex());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Txt entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(3, chapterName);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(4, filePath);
        }
        stmt.bindDouble(5, entity.getProgress());
        stmt.bindLong(6, entity.getAddedTime());
        stmt.bindLong(7, entity.getUpdatedTime());
        stmt.bindLong(8, entity.getCharIndex());
        stmt.bindLong(9, entity.getCurrentCharIndex());
        stmt.bindLong(10, entity.getCurrentParagraphIndex());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Txt readEntity(Cursor cursor, int offset) {
        Txt entity = new Txt( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chapterName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // filePath
            cursor.getFloat(offset + 4), // progress
            cursor.getLong(offset + 5), // addedTime
            cursor.getLong(offset + 6), // updatedTime
            cursor.getInt(offset + 7), // charIndex
            cursor.getInt(offset + 8), // currentCharIndex
            cursor.getInt(offset + 9) // currentParagraphIndex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Txt entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChapterName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFilePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProgress(cursor.getFloat(offset + 4));
        entity.setAddedTime(cursor.getLong(offset + 5));
        entity.setUpdatedTime(cursor.getLong(offset + 6));
        entity.setCharIndex(cursor.getInt(offset + 7));
        entity.setCurrentCharIndex(cursor.getInt(offset + 8));
        entity.setCurrentParagraphIndex(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Txt entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Txt entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Txt entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
